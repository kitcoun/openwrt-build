name: Build OpenWrt Firmware - Auto Matrix

on:
  push:
    branches: [ main, master ]
    paths:
      - 'configs/**'
      - '.github/workflows/**'
      - 'scripts/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'configs/**'
      - 'scripts/**'
  workflow_dispatch:
    inputs:
      OPENWRT_VERSION:
        description: 'OPENWRT VERSION'
        required: true
        default: '23.05.3'

env:
  OPENWRT_VERSION: ${{ github.event.inputs.OPENWRT_VERSION || '23.05.3' }}

jobs:
  discover-configs:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.config-matrix.outputs.matrix }}
      config_count: ${{ steps.config-count.outputs.count }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Discover config files
      id: config-matrix
      run: |
        # 查找所有配置文件，过滤掉以点开头的隐藏文件
        matrix=$(find configs -name "*.config" ! -name ".*" | jq -R -s -c '
          split("\n") |
          map(select(. != "")) |
          { include: map(. | {
            config_file: .
          }) }
        ')
        echo "matrix=$matrix" >> $GITHUB_OUTPUT
        
    - name: Count configs
      id: config-count
      run: |
        count=$(find configs -name "*.config" ! -name ".*" | wc -l)
        echo "count=$count" >> $GITHUB_OUTPUT

  prepare-scripts:
    runs-on: ubuntu-latest
    outputs:
      scripts_available: ${{ steps.check-scripts.outputs.available }}
      scripts_list: ${{ steps.list-scripts.outputs.list }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Check if scripts directory exists
      id: check-scripts
      run: |
        if [ -d "scripts" ] && [ "$(ls -A scripts/*.sh 2>/dev/null | wc -l)" -gt 0 ]; then
          echo "available=true" >> $GITHUB_OUTPUT
        else
          echo "available=false" >> $GITHUB_OUTPUT
        fi
        
    - name: List available scripts
      id: list-scripts
      run: |
        if [ -d "scripts" ]; then
          scripts=$(find scripts -name "*.sh" -type f | xargs -I {} basename {} | tr '\n' ',' | sed 's/,$//')
          echo "list=$scripts" >> $GITHUB_OUTPUT
        else
          echo "list=none" >> $GITHUB_OUTPUT
        fi

  build:
    needs: [discover-configs, prepare-scripts]
    if: needs.discover-configs.outputs.config_count != '0'
    runs-on: ubuntu-22.04
    strategy:
      matrix: ${{ fromJSON(needs.discover-configs.outputs.matrix) }}
      fail-fast: false
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Checkout OpenWrt Source
      run: |
        git clone https://git.openwrt.org/openwrt/openwrt.git openwrt-source
        cd openwrt-source
        git checkout v${{ env.OPENWRT_VERSION }}

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          clang \
          gcc \
          g++ \
          binutils \
          patch \
          bzip2 \
          flex \
          make \
          gettext \
          pkg-config \
          unzip \
          zlib1g-dev \
          libc6-dev \
          libssl-dev \
          libncurses5-dev \
          python3 \
          python3-distutils \
          rsync \
          curl

    - name: Parse config file info
      id: config-info
      run: |
        config_file="${{ matrix.config_file }}"
        config_name=$(basename "$config_file" .config)
        # 将配置文件名按"_"分割
        IFS='_' read -ra parts <<< "$config_name"
        target=${parts[0]}
        subtarget=${parts[1]}
        # 剩余部分为profile
        profile=$(IFS='_'; echo "${parts[*]:2}")
        echo "config_file=$config_file" >> $GITHUB_OUTPUT
        echo "config_name=$config_name" >> $GITHUB_OUTPUT
        echo "target=$target" >> $GITHUB_OUTPUT
        echo "subtarget=$subtarget" >> $GITHUB_OUTPUT
        echo "profile=$profile" >> $GITHUB_OUTPUT

    - name: Debug Info
      run: |
        echo "构建配置: ${{ steps.config-info.outputs.config_file }}"
        echo "配置名称: ${{ steps.config-info.outputs.config_name }}"
        echo "目标平台: ${{ steps.config-info.outputs.target }}/${{ steps.config-info.outputs.subtarget }}/${{ steps.config-info.outputs.profile }}"
        echo "工作目录: $(pwd)"
        echo "OpenWrt版本: ${{ env.OPENWRT_VERSION }}"
        echo "脚本可用: ${{ needs.prepare-scripts.outputs.scripts_available }}"
        echo "可用脚本: ${{ needs.prepare-scripts.outputs.scripts_list }}"

    - name: Copy Configuration
      run: |
        cp "${{ steps.config-info.outputs.config_file }}" openwrt-source/.config

    - name: Update Feeds
      working-directory: ./openwrt-source
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Apply Custom Patches (Optional)
      working-directory: ./openwrt-source
      run: |
        if [ -f "../scripts/apply-custom-patches.sh" ]; then
          chmod +x ../scripts/apply-custom-patches.sh
          ../scripts/apply-custom-patches.sh
        fi
            
    - name: Build Configuration
      working-directory: ./openwrt-source
      run: |
        make defconfig
        make -j$(($(nproc) + 1)) || make -j1 V=s

    - name: Collect Artifacts
      id: collect-artifacts
      run: |
        cd openwrt-source/bin/targets
        # 查找固件文件
        firmware_files=$(find . -name "*.bin" -o -name "*.img" -o -name "*.gz" | grep -v "/packages/" | head -10)
        echo "找到的固件文件:"
        echo "$firmware_files"
        
        # 创建版本信息
        echo "CONFIG_NAME=${{ steps.config-info.outputs.config_name }}" >> $GITHUB_ENV
        echo "BUILD_DATE=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_ENV
        echo "SCRIPTS_INCLUDED=${{ needs.prepare-scripts.outputs.scripts_available }}" >> $GITHUB_ENV

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: openwrt-${{ steps.config-info.outputs.config_name }}-${{ env.BUILD_DATE }}
        path: |
          openwrt-source/bin/targets/**/*.bin
          openwrt-source/bin/targets/**/*.img
          openwrt-source/bin/targets/**/*.gz
        retention-days: 30

  create-release:
    needs: [discover-configs, build, prepare-scripts]
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set current date
      id: date
      run: |
        echo "CURRENT_DATE=$(date +'%Y%m%d-%H%M')" >> $GITHUB_OUTPUT
        echo "CURRENT_DATE_FULL=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        SCRIPTS_LIST: ${{ needs.prepare-scripts.outputs.scripts_list }}
        SCRIPTS_AVAILABLE: ${{ needs.prepare-scripts.outputs.scripts_available }}
      with:
        tag_name: ${{ github.event.inputs.release_tag || 'nightly' }}-${{ steps.date.outputs.CURRENT_DATE }}
        name: OpenWrt ${{ env.OPENWRT_VERSION }} Build ${{ steps.date.outputs.CURRENT_DATE }}
        body: |
          # OpenWrt ${{ env.OPENWRT_VERSION }} 自动构建
          
          **构建信息:**
          - 版本: ${{ env.OPENWRT_VERSION }}
          - 构建时间: ${{ steps.date.outputs.CURRENT_DATE_FULL }}
          - 配置文件数量: ${{ needs.discover-configs.outputs.config_count }}
          - 触发事件: ${{ github.event_name }}
          - 包含首次启动脚本: ${{ env.SCRIPTS_AVAILABLE }}
          ${{ env.SCRIPTS_AVAILABLE == 'true' && format('**包含的脚本:** {0}', env.SCRIPTS_LIST) || '' }}
          
          **使用说明:**
          1. 下载对应设备的固件文件
          2. 通过Web界面或命令行刷入设备
          3. 首次启动时会自动执行配置脚本
          4. 如需设置宽带拨号，请设置环境变量 PPPOE_USER 和 PPPOE_PASS
          5. 首次使用建议备份原有配置
          
          **首次启动脚本说明:**
          设备首次启动时会自动执行 `/usr/share/firstboot/` 目录下的脚本
          宽带设置脚本会检查环境变量 `PPPOE_USER` 和 `PPPOE_PASS`，如设置则自动配置拨号
        draft: false
        prerelease: ${{ github.event_name == 'workflow_dispatch' }}
        files: |
          artifacts/**/*.bin
          artifacts/**/*.img
          artifacts/**/*.gz

  cleanup:
    needs: [discover-configs, build, create-release, prepare-scripts]
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: Cleanup notification
      run: |
        echo "构建流程完成"
        echo "配置文件数量: ${{ needs.discover-configs.outputs.config_count }}"
        echo "脚本可用: ${{ needs.prepare-scripts.outputs.scripts_available }}"
        echo "Release 创建: ${{ needs.create-release.result == 'success' && '成功' || '跳过' }}"